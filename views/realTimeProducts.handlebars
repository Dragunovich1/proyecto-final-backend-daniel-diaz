{{!-- realTimeProducts.handlebars --}}
{{#> layout showDashboardLink=true cartId=cartId}}
    <h2>{{title}}</h2>
    <ul class="product-list" id="products-list">
        {{#each products}}
            <li class="product-item">
                <span>{{this.name}} - ${{this.price}}</span>
                <div class="product-actions">
                    <a href="#" class="action-link" onclick="deleteProduct('{{this._id}}')">Eliminar</a>
                    <a href="/products/{{this._id}}/edit" class="action-link">Modificar</a>
                </div>
            </li>
        {{/each}}
    </ul>

    <h2>Agregar productos</h2>
    <form id="product-form">
        <input type="text" id="name" placeholder="Nombre" required>
        <input type="text" id="description" placeholder="Descripción" required>
        <input type="text" id="category" placeholder="Categoría" required>
        <input type="number" id="price" placeholder="Precio" required>
        <input type="number" id="stock" placeholder="Stock" required>
        <button type="submit" class="action-button">Agregar producto</button>
    </form>

    <style>
        .product-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            padding: 1rem;
            border: 1px solid #ddd;
            border-radius: 3px;
        }
        .product-actions {
            display: flex;
            gap: 0.5rem;
        }
        .action-link {
            padding: 0.5rem 1rem;
            background-color: #333;
            color: #fff;
            text-decoration: none;
            border-radius: 3px;
            text-align: center;
            cursor: pointer;
        }
        .action-link:hover {
            background-color: #555;
        }
        .action-button {
            display: flex;
            padding: 0.5rem 1rem;
            background-color: #333;
            color: #fff;
            text-decoration: none;
            border-radius: 3px;
            border: none;
            text-align: center;
            cursor: pointer;
        }
        .action-button:hover {
            background-color: #555;
        }
        .action-button:focus {
            outline: none;
        }
    </style>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();

        document.getElementById('product-form').addEventListener('submit', function(event) {
            event.preventDefault();
            const product = {
                name: document.getElementById('name').value,
                description: document.getElementById('description').value,
                category: document.getElementById('category').value,
                price: parseFloat(document.getElementById('price').value),
                stock: parseInt(document.getElementById('stock').value),
            };

            fetch('/api/products', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(product),
            }).then(response => response.json())
              .then(data => {
                  console.log(data);
                  document.getElementById('product-form').reset();  // Resetear el formulario

                  // Emitir un evento de actualización de productos
                  socket.emit('new-product', data);
              });
        });

        function deleteProduct(productId) {
            fetch(`/api/products/${productId}`, {
                method: 'DELETE'
            }).then(response => response.json())
              .then(data => {
                  console.log(data);
                  // Emitir un evento de eliminación de productos
                  socket.emit('delete-product', productId);
              });
        }

        socket.on('update-products', (products) => {
            const productsList = document.getElementById('products-list');
            productsList.innerHTML = '';
            products.forEach(product => {
                const listItem = document.createElement('li');
                listItem.className = 'product-item';
                listItem.innerHTML = `<span>${product.name} - $${product.price}</span>
                    <div class="product-actions">
                        <a href="#" class="action-link" onclick="deleteProduct('${product._id}')">Eliminar</a>
                        <a href="/products/${product._id}/edit" class="action-link">Modificar</a>
                    </div>`;
                productsList.appendChild(listItem);
            });
        });

        socket.on('new-product', (product) => {
            const productsList = document.getElementById('products-list');
            const listItem = document.createElement('li');
            listItem.className = 'product-item';
            listItem.innerHTML = `<span>${product.name} - $${product.price}</span>
                <div class="product-actions">
                    <a href="#" class="action-link" onclick="deleteProduct('${product._id}')">Eliminar</a>
                    <a href="/products/${product._id}/edit" class="action-link">Modificar</a>
                </div>`;
            productsList.appendChild(listItem);
        });

        socket.on('delete-product', (productId) => {
            const productsList = document.getElementById('products-list');
            const productItems = productsList.getElementsByClassName('product-item');
            for (let i = 0; i < productItems.length; i++) {
                if (productItems[i].querySelector('a').onclick.toString().includes(productId)) {
                    productsList.removeChild(productItems[i]);
                    break;
                }
            }
        });
    </script>
{{/layout}}
